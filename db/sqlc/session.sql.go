// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: session.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :exec
INSERT INTO ` + "`" + `session` + "`" + `(
	refresh_token,
	user_agent,
	client_ip,
	expires_at,
	user_id
) VALUES (
	?,
	?,
	?,
	?,
	UUID_TO_BIN(?)
)
`

type CreateSessionParams struct {
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
	UserID       string    `json:"user_id"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.exec(ctx, q.createSessionStmt, createSession,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
		arg.UserID,
	)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session
WHERE user_id = UUID_TO_BIN(?)
`

func (q *Queries) DeleteSession(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.deleteSessionStmt, deleteSession, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, refresh_token, user_agent, client_ip, is_banned, expires_at, created_at, user_id FROM session
WHERE user_id = UUID_TO_BIN(?)
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, userID string) (Session, error) {
	row := q.queryRow(ctx, q.getSessionStmt, getSession, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBanned,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserID,
	)
	return i, err
}
