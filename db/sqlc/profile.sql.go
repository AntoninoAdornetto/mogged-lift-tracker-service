// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: profile.sql

package db

import (
	"context"
	"database/sql"
)

const createProfile = `-- name: CreateProfile :execlastid
INSERT INTO profile (
	country,
	measurement_system,
	body_weight,
	body_fat,
	timezone_offset,
	user_id
) VALUES (?, ?, ?, ?, ?, UUID_TO_BIN(?))
`

type CreateProfileParams struct {
	Country           string  `json:"country"`
	MeasurementSystem string  `json:"measurement_system"`
	BodyWeight        float64 `json:"body_weight"`
	BodyFat           float64 `json:"body_fat"`
	TimezoneOffset    int32   `json:"timezone_offset"`
	UserID            string  `json:"user_id"`
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (int64, error) {
	result, err := q.exec(ctx, q.createProfileStmt, createProfile,
		arg.Country,
		arg.MeasurementSystem,
		arg.BodyWeight,
		arg.BodyFat,
		arg.TimezoneOffset,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteProfile = `-- name: DeleteProfile :execresult
DELETE FROM profile
WHERE user_id = UUID_TO_BIN(?)
`

func (q *Queries) DeleteProfile(ctx context.Context, userID string) (sql.Result, error) {
	return q.exec(ctx, q.deleteProfileStmt, deleteProfile, userID)
}

const getProfile = `-- name: GetProfile :one
SELECT id, country, measurement_system, body_weight, body_fat, timezone_offset, user_id FROM profile
WHERE user_id = UUID_TO_BIN(?) LIMIT 1
`

func (q *Queries) GetProfile(ctx context.Context, userID string) (Profile, error) {
	row := q.queryRow(ctx, q.getProfileStmt, getProfile, userID)
	var i Profile
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.MeasurementSystem,
		&i.BodyWeight,
		&i.BodyFat,
		&i.TimezoneOffset,
		&i.UserID,
	)
	return i, err
}

const updateProfile = `-- name: UpdateProfile :execresult
UPDATE profile SET
	country = COALESCE(?, country),
	measurement_system = COALESCE(?, measurement_system),
	body_weight = COALESCE(?, body_weight),
	body_fat = COALESCE(?, body_fat),
	timezone_offset = COALESCE(?, timezone_offset)
WHERE user_id = UUID_TO_BIN(?)
`

type UpdateProfileParams struct {
	Country           sql.NullString  `json:"country"`
	MeasurementSystem sql.NullString  `json:"measurement_system"`
	BodyWeight        sql.NullFloat64 `json:"body_weight"`
	BodyFat           sql.NullFloat64 `json:"body_fat"`
	TimezoneOffset    sql.NullInt32   `json:"timezone_offset"`
	UserID            string          `json:"user_id"`
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (sql.Result, error) {
	return q.exec(ctx, q.updateProfileStmt, updateProfile,
		arg.Country,
		arg.MeasurementSystem,
		arg.BodyWeight,
		arg.BodyFat,
		arg.TimezoneOffset,
		arg.UserID,
	)
}
