// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: lift.sql

package db

import (
	"context"
	"database/sql"
)

const createLift = `-- name: CreateLift :execresult
INSERT INTO lift (
	exercise_name,
	weight_lifted,
	reps,
	user_id,
	workout_id
) VALUES (
	?,
	?,
	?,
	UUID_TO_BIN(?),
	?
)
`

type CreateLiftParams struct {
	ExerciseName string  `json:"exercise_name"`
	WeightLifted float64 `json:"weight_lifted"`
	Reps         int32   `json:"reps"`
	UserID       string  `json:"user_id"`
	WorkoutID    int32   `json:"workout_id"`
}

func (q *Queries) CreateLift(ctx context.Context, arg CreateLiftParams) (sql.Result, error) {
	return q.exec(ctx, q.createLiftStmt, createLift,
		arg.ExerciseName,
		arg.WeightLifted,
		arg.Reps,
		arg.UserID,
		arg.WorkoutID,
	)
}

const getLift = `-- name: GetLift :one
SELECT id, exercise_name, weight_lifted, reps, user_id, workout_id FROM lift
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type GetLiftParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetLift(ctx context.Context, arg GetLiftParams) (Lift, error) {
	row := q.queryRow(ctx, q.getLiftStmt, getLift, arg.ID, arg.UserID)
	var i Lift
	err := row.Scan(
		&i.ID,
		&i.ExerciseName,
		&i.WeightLifted,
		&i.Reps,
		&i.UserID,
		&i.WorkoutID,
	)
	return i, err
}

const listLiftsFromWorkout = `-- name: ListLiftsFromWorkout :many
SELECT id, exercise_name, weight_lifted, reps, user_id, workout_id FROM lift
WHERE workout_id = ? AND user_id = UUID_TO_BIN(?)
`

type ListLiftsFromWorkoutParams struct {
	WorkoutID int32  `json:"workout_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) ListLiftsFromWorkout(ctx context.Context, arg ListLiftsFromWorkoutParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.listLiftsFromWorkoutStmt, listLiftsFromWorkout, arg.WorkoutID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lift
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
