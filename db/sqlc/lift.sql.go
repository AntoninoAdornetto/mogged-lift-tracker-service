// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: lift.sql

package db

import (
	"context"
	"database/sql"
)

const createLift = `-- name: CreateLift :execresult
INSERT INTO lift (
	exercise_name,
	weight_lifted,
	reps,
	set_type,
	user_id,
	workout_id
) VALUES (
	?,
	?,
	?,
	?,
	UUID_TO_BIN(?),
	?
)
`

type CreateLiftParams struct {
	ExerciseName string  `json:"exercise_name"`
	WeightLifted float64 `json:"weight_lifted"`
	Reps         int32   `json:"reps"`
	SetType      string  `json:"set_type"`
	UserID       string  `json:"user_id"`
	WorkoutID    int32   `json:"workout_id"`
}

func (q *Queries) CreateLift(ctx context.Context, arg CreateLiftParams) (sql.Result, error) {
	return q.exec(ctx, q.createLiftStmt, createLift,
		arg.ExerciseName,
		arg.WeightLifted,
		arg.Reps,
		arg.SetType,
		arg.UserID,
		arg.WorkoutID,
	)
}

const deleteLift = `-- name: DeleteLift :exec
DELETE FROM lift
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type DeleteLiftParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteLift(ctx context.Context, arg DeleteLiftParams) error {
	_, err := q.exec(ctx, q.deleteLiftStmt, deleteLift, arg.ID, arg.UserID)
	return err
}

const getLift = `-- name: GetLift :one
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type GetLiftParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetLift(ctx context.Context, arg GetLiftParams) (Lift, error) {
	row := q.queryRow(ctx, q.getLiftStmt, getLift, arg.ID, arg.UserID)
	var i Lift
	err := row.Scan(
		&i.ID,
		&i.ExerciseName,
		&i.WeightLifted,
		&i.Reps,
		&i.SetType,
		&i.UserID,
		&i.WorkoutID,
	)
	return i, err
}

const getMaxLifts = `-- name: GetMaxLifts :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE user_id = UUID_TO_BIN(?)
ORDER BY weight_lifted DESC LIMIT ?
`

type GetMaxLiftsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) GetMaxLifts(ctx context.Context, arg GetMaxLiftsParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.getMaxLiftsStmt, getMaxLifts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxLiftsByExercise = `-- name: GetMaxLiftsByExercise :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE exercise_name = ? AND user_id = UUID_TO_BIN(?)
ORDER BY weight_lifted DESC
`

type GetMaxLiftsByExerciseParams struct {
	ExerciseName string `json:"exercise_name"`
	UserID       string `json:"user_id"`
}

func (q *Queries) GetMaxLiftsByExercise(ctx context.Context, arg GetMaxLiftsByExerciseParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.getMaxLiftsByExerciseStmt, getMaxLiftsByExercise, arg.ExerciseName, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxLiftsByMuscleGroup = `-- name: GetMaxLiftsByMuscleGroup :many
SELECT muscle_group, exercise_name, weight_lifted, reps FROM lift
JOIN exercise ON exercise.user_id = UUID_TO_BIN(?) AND exercise.name = lift.exercise_name AND exercise.muscle_group = ?
WHERE lift.user_id = UUID_TO_BIN(?)
ORDER BY weight_lifted DESC
`

type GetMaxLiftsByMuscleGroupParams struct {
	UserID      string `json:"user_id"`
	MuscleGroup string `json:"muscle_group"`
}

type GetMaxLiftsByMuscleGroupRow struct {
	MuscleGroup  string  `json:"muscle_group"`
	ExerciseName string  `json:"exercise_name"`
	WeightLifted float64 `json:"weight_lifted"`
	Reps         int32   `json:"reps"`
}

func (q *Queries) GetMaxLiftsByMuscleGroup(ctx context.Context, arg GetMaxLiftsByMuscleGroupParams) ([]GetMaxLiftsByMuscleGroupRow, error) {
	rows, err := q.query(ctx, q.getMaxLiftsByMuscleGroupStmt, getMaxLiftsByMuscleGroup, arg.UserID, arg.MuscleGroup, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMaxLiftsByMuscleGroupRow{}
	for rows.Next() {
		var i GetMaxLiftsByMuscleGroupRow
		if err := rows.Scan(
			&i.MuscleGroup,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMaxRepLifts = `-- name: GetMaxRepLifts :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE user_id = UUID_TO_BIN(?)
ORDER BY reps DESC LIMIT ?
`

type GetMaxRepLiftsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) GetMaxRepLifts(ctx context.Context, arg GetMaxRepLiftsParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.getMaxRepLiftsStmt, getMaxRepLifts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLiftsFromWorkout = `-- name: ListLiftsFromWorkout :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE workout_id = ? AND user_id = UUID_TO_BIN(?)
`

type ListLiftsFromWorkoutParams struct {
	WorkoutID int32  `json:"workout_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) ListLiftsFromWorkout(ctx context.Context, arg ListLiftsFromWorkoutParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.listLiftsFromWorkoutStmt, listLiftsFromWorkout, arg.WorkoutID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLift = `-- name: UpdateLift :exec
UPDATE lift set
	exercise_name = COALESCE(?, exercise_name),
	weight_lifted = COALESCE(?, weight_lifted),
	reps = COALESCE(?, reps),
	set_type = COALESCE(?, set_type)
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type UpdateLiftParams struct {
	ExerciseName sql.NullString  `json:"exercise_name"`
	WeightLifted sql.NullFloat64 `json:"weight_lifted"`
	Reps         sql.NullInt32   `json:"reps"`
	SetType      sql.NullString  `json:"set_type"`
	ID           int64           `json:"id"`
	UserID       string          `json:"user_id"`
}

func (q *Queries) UpdateLift(ctx context.Context, arg UpdateLiftParams) error {
	_, err := q.exec(ctx, q.updateLiftStmt, updateLift,
		arg.ExerciseName,
		arg.WeightLifted,
		arg.Reps,
		arg.SetType,
		arg.ID,
		arg.UserID,
	)
	return err
}
