// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: lift.sql

package db

import (
	"context"
	"database/sql"
)

const createLift = `-- name: CreateLift :execresult
INSERT INTO lift (
	exercise_name,
	weight_lifted,
	reps,
	set_type,
	user_id,
	workout_id
) VALUES (
	?,
	?,
	?,
	?,
	UUID_TO_BIN(?),
	?
)
`

type CreateLiftParams struct {
	ExerciseName string  `json:"exercise_name"`
	WeightLifted float64 `json:"weight_lifted"`
	Reps         int32   `json:"reps"`
	SetType      string  `json:"set_type"`
	UserID       string  `json:"user_id"`
	WorkoutID    int32   `json:"workout_id"`
}

func (q *Queries) CreateLift(ctx context.Context, arg CreateLiftParams) (sql.Result, error) {
	return q.exec(ctx, q.createLiftStmt, createLift,
		arg.ExerciseName,
		arg.WeightLifted,
		arg.Reps,
		arg.SetType,
		arg.UserID,
		arg.WorkoutID,
	)
}

const deleteLift = `-- name: DeleteLift :execresult
DELETE FROM lift
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type DeleteLiftParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteLift(ctx context.Context, arg DeleteLiftParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteLiftStmt, deleteLift, arg.ID, arg.UserID)
}

const getLift = `-- name: GetLift :one
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type GetLiftParams struct {
	ID     int64  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetLift(ctx context.Context, arg GetLiftParams) (Lift, error) {
	row := q.queryRow(ctx, q.getLiftStmt, getLift, arg.ID, arg.UserID)
	var i Lift
	err := row.Scan(
		&i.ID,
		&i.ExerciseName,
		&i.WeightLifted,
		&i.Reps,
		&i.SetType,
		&i.UserID,
		&i.WorkoutID,
	)
	return i, err
}

const listLiftsFromWorkout = `-- name: ListLiftsFromWorkout :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE workout_id = ? AND user_id = UUID_TO_BIN(?)
`

type ListLiftsFromWorkoutParams struct {
	WorkoutID int32  `json:"workout_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) ListLiftsFromWorkout(ctx context.Context, arg ListLiftsFromWorkoutParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.listLiftsFromWorkoutStmt, listLiftsFromWorkout, arg.WorkoutID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaxRepPrs = `-- name: ListMaxRepPrs :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE user_id = UUID_TO_BIN(?)
ORDER BY reps DESC LIMIT ?
`

type ListMaxRepPrsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) ListMaxRepPrs(ctx context.Context, arg ListMaxRepPrsParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.listMaxRepPrsStmt, listMaxRepPrs, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaxWeightByExercise = `-- name: ListMaxWeightByExercise :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE exercise_name = ? AND user_id = UUID_TO_BIN(?)
ORDER BY weight_lifted DESC
`

type ListMaxWeightByExerciseParams struct {
	ExerciseName string `json:"exercise_name"`
	UserID       string `json:"user_id"`
}

func (q *Queries) ListMaxWeightByExercise(ctx context.Context, arg ListMaxWeightByExerciseParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.listMaxWeightByExerciseStmt, listMaxWeightByExercise, arg.ExerciseName, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaxWeightByMuscleGroup = `-- name: ListMaxWeightByMuscleGroup :many
SELECT muscle_group, exercise_name, weight_lifted, reps FROM lift
JOIN exercise ON exercise.muscle_group = ? 
WHERE lift.user_id = UUID_TO_BIN(?)
ORDER BY weight_lifted DESC
`

type ListMaxWeightByMuscleGroupParams struct {
	MuscleGroup string `json:"muscle_group"`
	UserID      string `json:"user_id"`
}

type ListMaxWeightByMuscleGroupRow struct {
	MuscleGroup  string  `json:"muscle_group"`
	ExerciseName string  `json:"exercise_name"`
	WeightLifted float64 `json:"weight_lifted"`
	Reps         int32   `json:"reps"`
}

func (q *Queries) ListMaxWeightByMuscleGroup(ctx context.Context, arg ListMaxWeightByMuscleGroupParams) ([]ListMaxWeightByMuscleGroupRow, error) {
	rows, err := q.query(ctx, q.listMaxWeightByMuscleGroupStmt, listMaxWeightByMuscleGroup, arg.MuscleGroup, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMaxWeightByMuscleGroupRow{}
	for rows.Next() {
		var i ListMaxWeightByMuscleGroupRow
		if err := rows.Scan(
			&i.MuscleGroup,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaxWeightLifts = `-- name: ListMaxWeightLifts :many
SELECT id, exercise_name, weight_lifted, reps, set_type, user_id, workout_id FROM lift
WHERE user_id = UUID_TO_BIN(?)
ORDER BY weight_lifted DESC LIMIT ?
`

type ListMaxWeightLiftsParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
}

func (q *Queries) ListMaxWeightLifts(ctx context.Context, arg ListMaxWeightLiftsParams) ([]Lift, error) {
	rows, err := q.query(ctx, q.listMaxWeightLiftsStmt, listMaxWeightLifts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Lift{}
	for rows.Next() {
		var i Lift
		if err := rows.Scan(
			&i.ID,
			&i.ExerciseName,
			&i.WeightLifted,
			&i.Reps,
			&i.SetType,
			&i.UserID,
			&i.WorkoutID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLift = `-- name: UpdateLift :execresult
UPDATE lift set
exercise_name = IFNULL(?, exercise_name),
weight_lifted = IFNULL(?, weight_lifted),
reps = IFNULL(?, reps)
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type UpdateLiftParams struct {
	ExerciseName interface{} `json:"exercise_name"`
	WeightLifted interface{} `json:"weight_lifted"`
	Reps         interface{} `json:"reps"`
	ID           int64       `json:"id"`
	UserID       string      `json:"user_id"`
}

func (q *Queries) UpdateLift(ctx context.Context, arg UpdateLiftParams) (sql.Result, error) {
	return q.exec(ctx, q.updateLiftStmt, updateLift,
		arg.ExerciseName,
		arg.WeightLifted,
		arg.Reps,
		arg.ID,
		arg.UserID,
	)
}
