// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: muscle_group.sql

package db

import (
	"context"
	"database/sql"
)

const createMuscleGroup = `-- name: CreateMuscleGroup :execresult
INSERT INTO muscle_group (
	name
) VALUES (?)
`

func (q *Queries) CreateMuscleGroup(ctx context.Context, name string) (sql.Result, error) {
	return q.exec(ctx, q.createMuscleGroupStmt, createMuscleGroup, name)
}

const deleteAllMuscleGroups = `-- name: DeleteAllMuscleGroups :execresult
DELETE FROM muscle_group
`

// no API for this query, only for testing purposes
func (q *Queries) DeleteAllMuscleGroups(ctx context.Context) (sql.Result, error) {
	return q.exec(ctx, q.deleteAllMuscleGroupsStmt, deleteAllMuscleGroups)
}

const deleteMuscleGroup = `-- name: DeleteMuscleGroup :execresult
DELETE FROM muscle_group
WHERE id = ?
`

func (q *Queries) DeleteMuscleGroup(ctx context.Context, id int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteMuscleGroupStmt, deleteMuscleGroup, id)
}

const getMuscleGroup = `-- name: GetMuscleGroup :one
SELECT id, name FROM muscle_group
WHERE id = ?
`

func (q *Queries) GetMuscleGroup(ctx context.Context, id int32) (MuscleGroup, error) {
	row := q.queryRow(ctx, q.getMuscleGroupStmt, getMuscleGroup, id)
	var i MuscleGroup
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listMuscleGroups = `-- name: ListMuscleGroups :many
SELECT id, name FROM muscle_group ORDER BY id
`

func (q *Queries) ListMuscleGroups(ctx context.Context) ([]MuscleGroup, error) {
	rows, err := q.query(ctx, q.listMuscleGroupsStmt, listMuscleGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MuscleGroup
	for rows.Next() {
		var i MuscleGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMuscleGroup = `-- name: UpdateMuscleGroup :execresult
UPDATE muscle_group SET
name = ?
WHERE id = ?
`

type UpdateMuscleGroupParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateMuscleGroup(ctx context.Context, arg UpdateMuscleGroupParams) (sql.Result, error) {
	return q.exec(ctx, q.updateMuscleGroupStmt, updateMuscleGroup, arg.Name, arg.ID)
}
