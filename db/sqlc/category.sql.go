// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :execresult
INSERT INTO category (
	name
) VALUES (?)
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (sql.Result, error) {
	return q.exec(ctx, q.createCategoryStmt, createCategory, name)
}

const deleteCategory = `-- name: DeleteCategory :execresult
DELETE FROM category
WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteCategoryStmt, deleteCategory, id)
}

const getCategory = `-- name: GetCategory :one
SELECT id, name FROM category
WHERE id = ?
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.queryRow(ctx, q.getCategoryStmt, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name FROM category
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.query(ctx, q.listCategoriesStmt, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :execresult
UPDATE category SET
name = ?
WHERE id = ?
`

type UpdateCategoryParams struct {
	Name string `json:"name"`
	ID   int32  `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	return q.exec(ctx, q.updateCategoryStmt, updateCategory, arg.Name, arg.ID)
}
