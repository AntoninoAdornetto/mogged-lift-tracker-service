// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: exercise.sql

package db

import (
	"context"
	"database/sql"
)

const createExercise = `-- name: CreateExercise :execresult
INSERT INTO exercise (
	name,
	muscle_group,
	category,
	user_id
) VALUES (
	?,
	?,
	?,
	UUID_TO_BIN(?)
)
`

type CreateExerciseParams struct {
	Name        string `json:"name"`
	MuscleGroup string `json:"muscle_group"`
	Category    string `json:"category"`
	UserID      string `json:"user_id"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (sql.Result, error) {
	return q.exec(ctx, q.createExerciseStmt, createExercise,
		arg.Name,
		arg.MuscleGroup,
		arg.Category,
		arg.UserID,
	)
}

const deleteExercise = `-- name: DeleteExercise :execresult
DELETE FROM exercise
WHERE id = ? AND user_id = UUID_TO_BIN(?)
`

type DeleteExerciseParams struct {
	ID     int32  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteExercise(ctx context.Context, arg DeleteExerciseParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteExerciseStmt, deleteExercise, arg.ID, arg.UserID)
}

const getExercise = `-- name: GetExercise :one
SELECT id, name, muscle_group, category, isstock, most_weight_lifted, most_reps_lifted, rest_timer, user_id FROM exercise
WHERE id = ? AND user_id = UUID_TO_BIN(?) LIMIT 1
`

type GetExerciseParams struct {
	ID     int32  `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetExercise(ctx context.Context, arg GetExerciseParams) (Exercise, error) {
	row := q.queryRow(ctx, q.getExerciseStmt, getExercise, arg.ID, arg.UserID)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MuscleGroup,
		&i.Category,
		&i.Isstock,
		&i.MostWeightLifted,
		&i.MostRepsLifted,
		&i.RestTimer,
		&i.UserID,
	)
	return i, err
}

const getExerciseFromName = `-- name: GetExerciseFromName :one
SELECT id, name, muscle_group, category, isstock, most_weight_lifted, most_reps_lifted, rest_timer, user_id FROM exercise
WHERE name = ? AND user_id = UUID_TO_BIN(?)
`

type GetExerciseFromNameParams struct {
	Name   string `json:"name"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetExerciseFromName(ctx context.Context, arg GetExerciseFromNameParams) (Exercise, error) {
	row := q.queryRow(ctx, q.getExerciseFromNameStmt, getExerciseFromName, arg.Name, arg.UserID)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MuscleGroup,
		&i.Category,
		&i.Isstock,
		&i.MostWeightLifted,
		&i.MostRepsLifted,
		&i.RestTimer,
		&i.UserID,
	)
	return i, err
}

const listExercises = `-- name: ListExercises :many
SELECT id, name, muscle_group, category, isstock, most_weight_lifted, most_reps_lifted, rest_timer, user_id FROM exercise
WHERE user_id = UUID_TO_BIN(?)
`

func (q *Queries) ListExercises(ctx context.Context, userID string) ([]Exercise, error) {
	rows, err := q.query(ctx, q.listExercisesStmt, listExercises, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MuscleGroup,
			&i.Category,
			&i.Isstock,
			&i.MostWeightLifted,
			&i.MostRepsLifted,
			&i.RestTimer,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :execresult
UPDATE exercise SET
name = IFNULL(?, name),
muscle_group = IFNULL(?, muscle_group),
category = IFNULL(?, category),
most_weight_lifted = IFNULL(?, most_weight_lifted),
most_reps_lifted = IFNULL(?, most_reps_lifted),
rest_timer = IFNULL(?, rest_timer)
WHERE user_id = UUID_TO_BIN(?) AND id = ?
`

type UpdateExerciseParams struct {
	Name             interface{} `json:"name"`
	MuscleGroup      interface{} `json:"muscle_group"`
	Category         interface{} `json:"category"`
	MostWeightLifted interface{} `json:"most_weight_lifted"`
	MostRepsLifted   interface{} `json:"most_reps_lifted"`
	RestTimer        interface{} `json:"rest_timer"`
	UserID           string      `json:"user_id"`
	ID               int32       `json:"id"`
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) (sql.Result, error) {
	return q.exec(ctx, q.updateExerciseStmt, updateExercise,
		arg.Name,
		arg.MuscleGroup,
		arg.Category,
		arg.MostWeightLifted,
		arg.MostRepsLifted,
		arg.RestTimer,
		arg.UserID,
		arg.ID,
	)
}
