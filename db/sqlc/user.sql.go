// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO user (
	id,
	first_name,
	last_name,
	email_address,
	password
) VALUES (UUID_TO_BIN(UUID()),?, ?, ?, ?)
`

type CreateUserParams struct {
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	EmailAddress string `json:"email_address"`
	Password     string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.createUserStmt, createUser,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.Password,
	)
}

const deleteUser = `-- name: DeleteUser :execresult

DELETE FROM user
WHERE id = UUID_TO_BIN(?)
`

// @todo using this UUID to Bin function results in the field name being called "UUIDTOBIN"
// look into sqlc naming parameters. sqlc.narg was resulting in the struct having an interface type for id instead of a string
func (q *Queries) DeleteUser(ctx context.Context, uuidTOBIN string) (sql.Result, error) {
	return q.exec(ctx, q.deleteUserStmt, deleteUser, uuidTOBIN)
}

const getUser = `-- name: GetUser :one
SELECT BIN_TO_UUID(id) as id, first_name, last_name, email_address FROM user
WHERE email_address = ? LIMIT 1
`

type GetUserRow struct {
	ID           string `json:"id"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	EmailAddress string `json:"email_address"`
}

func (q *Queries) GetUser(ctx context.Context, emailAddress string) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, emailAddress)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.EmailAddress,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE user SET
first_name = IFNULL(?, first_name),
last_name = IFNULL(?, last_name),
email_address = IFNULL(?, email_address)
WHERE id = UUID_TO_BIN(?)
`

type UpdateUserParams struct {
	FirstName    interface{} `json:"first_name"`
	LastName     interface{} `json:"last_name"`
	EmailAddress interface{} `json:"email_address"`
	UUIDTOBIN    string      `json:"UUID_TO_BIN"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.exec(ctx, q.updateUserStmt, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.EmailAddress,
		arg.UUIDTOBIN,
	)
}
